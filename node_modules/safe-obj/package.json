{
  "name": "safe-obj",
  "description": "Underscore helpers to make object accessors safe",
  "version": "1.0.2",
  "author": {
    "name": "mantacode",
    "email": "code@manta.com",
    "url": "www.manta.com"
  },
  "contributors": [
    {
      "name": "Andrew Nichols",
      "email": "anichols@manta.com"
    },
    {
      "name": "Rob Zakrzewski",
      "email": "rzakrzewski@manta.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/tandrewnichols/safe-obj.git"
  },
  "homepage": "https://github.com/mantacode/safe-obj",
  "bugs": {
    "url": "https://github.com/mantacode/safe-obj/issues"
  },
  "license": "MIT",
  "scripts": {
    "test": "grunt",
    "prepublish": "grunt prepublish",
    "publish": "if echo $USERNAME | grep -cq 'anichols'; then publisher run; fi"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "~1.7.1",
    "expect.js": "^0.3.1",
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-copy": "^0.6.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-testem": "^0.5.16",
    "grunt-contrib-uglify": "^0.6.0",
    "grunt-mocha-cov": "^0.3.0",
    "grunt-mocha-test": "^0.11.0",
    "grunt-travis-matrix": "0.0.4",
    "indeed": "~1.0.1",
    "jshint-stylish": "^0.4.0",
    "lodash": "^2.4.1",
    "mocha": "git://github.com/tandrewnichols/mocha.git#suppress-stack",
    "mocha-given": "git://github.com/tandrewnichols/mocha-given.git",
    "task-master": "^1.0.4",
    "underscore": "~1.6.0"
  },
  "keywords": [
    "underscore",
    "helpers",
    "safety",
    "autovivification"
  ],
  "main": "./lib/index.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "config": {
    "blanket": {
      "pattern": [
        "safe-obj/lib"
      ]
    }
  },
  "readme": "[![Build Status](https://travis-ci.org/mantacode/safe-obj.png)](https://travis-ci.org/mantacode/safe-obj) [![downloads](http://img.shields.io/npm/dm/safe-obj.svg)](https://npmjs.org/package/safe-obj) [![npm](http://img.shields.io/npm/v/safe-obj.svg)](https://npmjs.org/package/safe-obj) [![Test Coverage](https://codeclimate.com/github/mantacode/safe-obj/badges/coverage.svg)](https://codeclimate.com/github/mantacode/safe-obj) [![Code Climate](https://codeclimate.com/github/mantacode/safe-obj/badges/gpa.svg)](https://codeclimate.com/github/mantacode/safe-obj) [![dependencies](https://david-dm.org/mantacode/safe-obj.png)](https://david-dm.org/mantacode/safe-obj)\n\n[![NPM info](https://nodei.co/npm/safe-obj.png?downloads=true)](https://nodei.co/npm/safe-obj.png?downloads=true)\n\n# Safe-obj\n\nUnderscore helpers to make object accessors safe\n\nI came (partly) from a Perl background where you could say `$obj->{thing}->{another_thing}->{more_things}`, and it would not blow up even if $obj was totally empty. Similarly, you could say `$obj->{thing}->{foo} = 'bar'`, even if $obj had no property called 'thing'. I don't miss everything about Perl, but I do miss that. In javascript, you'd have to say:\n\n```javascript\nif (obj && obj.thing && obj.thing.another_thing && obj.thing.another_thing.more_things) {\n  // I want to die a little bit\n}\n```\n\nSo this module is basically auto-vivification for javascript.\n\n## Install\n\n`npm install safe-obj --save`\n\n## Usage\n\n### Server\n\nAs of v1.0.0, this module works with both lodash and underscore, though it requires using `_.safe(obj, path)` with lodash since `_(obj).safe(path)` triggers lodash's chaining.\n\n`safe-obj` exports an object that can be mixed into underscore/lodash like this:\n\n```javascript\n_.mixin(require('safe-obj'));\n```\n\nthat let's you access object properties with wild abandon.\n\n### Client\n\nAdditionally, as of v1.0.0, it works on the client side. If `window._` is defined (i.e. lodash or underscore has been loaded), `_.safe` will add an `_safe` property to it, which you can mix in with `_.mixin(_._safe)`.\n\nOn the client, just include the script after underscore or lodash:\n\n```html\n<script src=\"/underscore.js\"></script>\n<script src=\"path/to/safe-obj/dist/safe.js\"></script>\n```\n\nand then mix it in:\n\n```html\n<script>\n  (function() {\n    _.mixin(_._safe);\n  })();\n</script>\n```\n\n## API\n\n### Safe\n\nLet's you access object properties (and array indices too!) regardless of whether they exist. If, at any point, a property returns `undefined` (where calling another object accessor would blow up), `safe` immediately just returns `undefined` (or a default, if you provide one).\n\n```javascript\nvar obj = {}\n\n// returns undefined\nvar innerProp = _(obj).safe('foo.bar.baz.0.hello.world'); \n\n// returns [] - useful if you want to call array methods but don't want to check the type\nvar anotherProp = _(obj).safe('a.brave.new.world', []); \n```\n\n### Expand\n\nLet's you assign to any arbitrarily deep and non-existent property on an object. Any non-existent properties are expanded into objects.\n\n```javascript\nvar obj = {}\n\n_(obj).expand('foo.bar.baz', 'hello world');\n\n// obj now equals: {\n//   foo: {\n//     bar: {\n//       baz: 'hello world'\n//     }\n//   }\n// }\n```\n\nExpand is likely to be finnicky (at the moment) with expanding arrays. It's untested, and my guess is that it will create object properties with numbers. Something like\n\n```javascript\nproperty: {\n  0: {\n    // more stuff\n  }\n}\n```\n\nI'd like to make that work more as expected in a future release, but for now, don't expect it to work.\n\n### Ensure\n\nSets a path to a given value unless that path already has a value. Also allows an optional list of \"disallowed\" values.\n\n```javascript\nvar obj = {\n  foo: {\n    bar: 'baz'\n  }\n};\n\n// This will have no effect on obj since 'foo.bar' already has a value\n_(obj).ensure('foo.bar', 'a default value');\n\nobj = {\n  foo: {}\n};\n\n// This will set obj.foo equal to { bar: 'a default value' }\n_(obj).ensure('foo.bar', 'a default value');\n\nobj = {\n  foo: {\n    bar: 'nope'\n  }\n};\n\n// This says don't allow 'nope' as a value of foo.bar, thus it will use the default\n_(obj).ensure('foo.bar', [ 'nope' ], 'a default value');\n```\n\n### AllOf\n\nUses `safe` to return `true` if all the paths exist in the object or `false` if any is missing.\n\n```javascript\nvar obj = {\n  foo: {\n    bar: 'baz'\n  }\n};\n\n_(obj).allOf('foo.bar', 'hello.world'); // returns false\n\n// or\n// _(obj).allOf(['foo.bar', 'hello.world']);\n```\n\n### AnyOf\n\nLike `allOf` but returns `true` if any of the paths exist.\n\n```javascript\nvar obj = {\n  foo: {\n    bar: 'baz'\n  }\n};\n\n_(obj).anyOf('foo.bar', 'hello.world'); // returns true\n```\n\n### NoneOf\n\nLike `allOf` and `anyOf` but only returns true when none of the paths exist.\n\n```javascript\nvar obj = {\n  foo: {\n    bar: 'baz'\n  }\n};\n\n_(obj).noneOf('foo.bar', 'hello.world'); // returns false\n```\n",
  "readmeFilename": "README.md",
  "_id": "safe-obj@1.0.2",
  "_shasum": "a8b2f017651c3d972a9931dc6fe9fce96f6465d2",
  "_from": "safe-obj@"
}
